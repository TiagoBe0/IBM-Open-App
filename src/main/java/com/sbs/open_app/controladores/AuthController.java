package com.sbs.open_app.controladores;

import com.sbs.open_app.dto.RegistroUsuarioDTO;
import com.sbs.open_app.entidades.Usuario;
import com.sbs.open_app.excepciones.UsuarioException;
import com.sbs.open_app.servicios.UsuarioServicio;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.io.IOException;

@Controller
public class AuthController {
    
    @Autowired
    private UsuarioServicio usuarioServicio;
    
    /**
     * Mostrar p√°gina de inicio
     */
    @GetMapping("/")
    public String home(Model model) {
        System.out.println("üìç Accediendo a p√°gina de inicio");
        return "index";
    }
    
    /**
     * Mostrar formulario de login
     */
    @GetMapping("/login")
    public String mostrarLogin(
            @RequestParam(value = "error", required = false) String error,
            @RequestParam(value = "logout", required = false) String logout,
            @RequestParam(value = "expired", required = false) String expired,
            Model model) {
        
        System.out.println("üìç Mostrando p√°gina de login");
        
        if (error != null) {
            System.out.println("‚ùå Error de login detectado");
            model.addAttribute("error", "Email o contrase√±a incorrectos");
        }
        
        if (logout != null) {
            System.out.println("‚úÖ Usuario cerr√≥ sesi√≥n");
            model.addAttribute("mensaje", "Has cerrado sesi√≥n exitosamente");
        }
        
        if (expired != null) {
            System.out.println("‚è∞ Sesi√≥n expirada");
            model.addAttribute("error", "Tu sesi√≥n ha expirado. Por favor, inicia sesi√≥n nuevamente");
        }
        
        return "login";
    }
    
    /**
     * Mostrar formulario de registro
     */
    @GetMapping("/registro")
    public String mostrarRegistro(Model model) {
        System.out.println("üìç Mostrando p√°gina de registro");
        RegistroUsuarioDTO dto = new RegistroUsuarioDTO();
        model.addAttribute("usuario", dto);
        return "registro";
    }
    
    /**
     * Procesar registro de usuario
     */
    @PostMapping("/registrar")
    public String registrarUsuario(
            @Valid @ModelAttribute("usuario") RegistroUsuarioDTO registroDTO,
            BindingResult result,
            @RequestParam(value = "foto", required = false) MultipartFile foto,
            RedirectAttributes redirectAttributes,
            Model model) {
        
        System.out.println("üîç INICIANDO PROCESO DE REGISTRO");
        System.out.println("üìß Email: " + registroDTO.getEmail());
        System.out.println("üë§ Nombre: " + registroDTO.getNombre());
        System.out.println("üë§ Apellido: " + registroDTO.getApellido());
        System.out.println("üîë Password length: " + (registroDTO.getPassword() != null ? registroDTO.getPassword().length() : 0));
        System.out.println("üîë Confirm Password length: " + (registroDTO.getConfirmPassword() != null ? registroDTO.getConfirmPassword().length() : 0));
        
        // Verificar errores de validaci√≥n
        if (result.hasErrors()) {
            System.out.println("‚ùå Errores de validaci√≥n encontrados:");
            result.getAllErrors().forEach(error -> {
                System.out.println("   - " + error.getDefaultMessage());
            });
            return "registro";
        }
        
        // Verificar que las contrase√±as coincidan
        if (!registroDTO.passwordsMatch()) {
            System.out.println("‚ùå Las contrase√±as no coinciden");
            model.addAttribute("errorPassword", "Las contrase√±as no coinciden");
            return "registro";
        }
        
        try {
            Usuario nuevoUsuario;
            
            // Registrar con o sin foto
            if (foto != null && !foto.isEmpty()) {
                System.out.println("üì∑ Registrando con foto");
                nuevoUsuario = usuarioServicio.registrarUsuarioConFoto(registroDTO, foto);
            } else {
                System.out.println("üìù Registrando sin foto");
                nuevoUsuario = usuarioServicio.registrarUsuario(registroDTO);
            }
            
            System.out.println("‚úÖ USUARIO REGISTRADO EXITOSAMENTE:");
            System.out.println("   - ID: " + nuevoUsuario.getId());
            System.out.println("   - Email: " + nuevoUsuario.getEmail());
            System.out.println("   - Rol: " + nuevoUsuario.getRol());
            System.out.println("   - Activo: " + nuevoUsuario.getActivo());
            
            redirectAttributes.addFlashAttribute("exito", 
                "¬°Registro exitoso! Por favor, inicia sesi√≥n con tus credenciales.");
            
            return "redirect:/login";
            
        } catch (UsuarioException e) {
            System.err.println("‚ùå Error de usuario: " + e.getMessage());
            model.addAttribute("error", e.getMessage());
            return "registro";
        } catch (IOException e) {
            System.err.println("‚ùå Error de IO: " + e.getMessage());
            model.addAttribute("error", "Error al guardar la foto de perfil");
            return "registro";
        } catch (Exception e) {
            System.err.println("‚ùå Error inesperado: " + e.getMessage());
            e.printStackTrace();
            model.addAttribute("error", "Error inesperado: " + e.getMessage());
            return "registro";
        }
    }
    
    /**
     * Dashboard despu√©s del login
     */
    @GetMapping("/dashboard")
    public String dashboard(Model model) {
        System.out.println("üìç Accediendo al dashboard");
        
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            
            if (auth != null && auth.getPrincipal() instanceof Usuario) {
                Usuario usuario = (Usuario) auth.getPrincipal();
                System.out.println("‚úÖ Usuario autenticado: " + usuario.getEmail());
                model.addAttribute("usuario", usuario);
                model.addAttribute("nombreCompleto", usuario.getNombreCompleto());
            } else {
                System.err.println("‚ùå No se pudo obtener el usuario autenticado");
                return "redirect:/login";
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al cargar dashboard: " + e.getMessage());
            e.printStackTrace();
            return "redirect:/login";
        }
        
        return "dashboard";
    }
        @GetMapping("/registro-arbol")
    public String registroArbol(Model model) {
        System.out.println("üìç Accediendo al dashboard");
        
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            
            if (auth != null && auth.getPrincipal() instanceof Usuario) {
                Usuario usuario = (Usuario) auth.getPrincipal();
                System.out.println("‚úÖ Usuario autenticado: " + usuario.getEmail());
                model.addAttribute("usuario", usuario);
                model.addAttribute("nombreCompleto", usuario.getNombreCompleto());
            } else {
                System.err.println("‚ùå No se pudo obtener el usuario autenticado");
                return "redirect:/dashboard";
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al cargar dashboard: " + e.getMessage());
            e.printStackTrace();
            return "redirect:/dashboard";
        }
        
        return "registroArbol.html";
    }
    /**
     * Perfil del usuario
     */
    @GetMapping("/perfil")
    public String verPerfil(Model model) {
        System.out.println("üìç Accediendo al perfil");
        
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            
            if (auth != null && auth.getPrincipal() instanceof Usuario) {
                Usuario usuario = (Usuario) auth.getPrincipal();
                model.addAttribute("usuario", usuario);
            } else {
                return "redirect:/login";
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al cargar perfil: " + e.getMessage());
            return "redirect:/login";
        }
        
        return "perfil";
    }
}